import React, { useState } from 'react';
import './ScenariosPage.css';

function ScenariosPage({ onBack }) {
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  const categories = [
    { id: 'all', name: '–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏' },
    { id: 'family', name: '–°–µ–º—å—è' },
    { id: 'work', name: '–†–∞–±–æ—Ç–∞' },
    { id: 'health', name: '–ó–¥–æ—Ä–æ–≤—å–µ' },
    { id: 'home', name: '–î–æ–º' },
    { id: 'children', name: '–î–µ—Ç–∏' }
  ];

  // –°—Ü–µ–Ω–∞—Ä–∏–∏
  const [scenarios, setScenarios] = useState([
    {
      id: 1,
      title: '–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª',
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏',
      category: 'family',
      blocks: [
        { id: 1, type: 'time', value: '07:00', label: '–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ' },
        { id: 2, type: 'action', value: 'coffee', label: '–í–∫–ª—é—á–∏—Ç—å –∫–æ—Ñ–µ–≤–∞—Ä–∫—É' },
        { id: 3, type: 'action', value: 'lights', label: '–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç' },
        { id: 4, type: 'delay', value: '15', label: '–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç' },
        { id: 5, type: 'action', value: 'music', label: '–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É' }
      ],
      active: true,
      target: 'family'
    },
    {
      id: 2,
      title: '–î–µ—Ç—Å–∫–∏–π —Å–æ–Ω',
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–µ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –¥–µ—Ç–µ–π',
      category: 'children',
      blocks: [
        { id: 1, type: 'time', value: '20:30', label: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É' },
        { id: 2, type: 'action', value: 'lights_dim', label: '–ü—Ä–∏–≥–ª—É—à–∏—Ç—å —Å–≤–µ—Ç' },
        { id: 3, type: 'action', value: 'music_calm', label: '–°–ø–æ–∫–æ–π–Ω–∞—è –º—É–∑—ã–∫–∞' },
        { id: 4, type: 'delay', value: '30', label: '–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç' },
        { id: 5, type: 'action', value: 'lights_off', label: '–í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç' }
      ],
      active: true,
      target: 'children'
    },
    {
      id: 3,
      title: '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å',
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
      category: 'work',
      blocks: [
        { id: 1, type: 'time', value: '09:00', label: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
        { id: 2, type: 'action', value: 'pc_on', label: '–í–∫–ª—é—á–∏—Ç—å –ü–ö' },
        { id: 3, type: 'action', value: 'lights_work', label: '–†–∞–±–æ—á–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ' },
        { id: 4, type: 'condition', value: 'meeting', label: '–ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞' },
        { id: 5, type: 'action', value: 'camera_on', label: '–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É' }
      ],
      active: false,
      target: 'adults'
    },
    {
      id: 4,
      title: '–§–∏—Ç–Ω–µ—Å-—Ä–µ–∂–∏–º',
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
      category: 'health',
      blocks: [
        { id: 1, type: 'time', value: '19:00', label: '–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' },
        { id: 2, type: 'action', value: 'lights_gym', label: '–û—Å–≤–µ—â–µ–Ω–∏–µ –∑–∞–ª–∞' },
        { id: 3, type: 'action', value: 'music_workout', label: '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è –º—É–∑—ã–∫–∞' },
        { id: 4, type: 'action', value: 'ac_on', label: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä' },
        { id: 5, type: 'delay', value: '60', label: '–ß–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç' },
        { id: 6, type: 'action', value: 'sauna', label: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–∞—É–Ω—É' }
      ],
      active: true,
      target: 'adults'
    },
    {
      id: 5,
      title: '–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç–¥—ã—Ö',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏',
      category: 'home',
      blocks: [
        { id: 1, type: 'time', value: '21:00', label: '–í–µ—á–µ—Ä–Ω–∏–π —Ä–µ–∂–∏–º' },
        { id: 2, type: 'action', value: 'lights_warm', label: '–¢–µ–ø–ª—ã–π —Å–≤–µ—Ç' },
        { id: 3, type: 'action', value: 'music_jazz', label: '–î–∂–∞–∑–æ–≤–∞—è –º—É–∑—ã–∫–∞' },
        { id: 4, type: 'action', value: 'curtains', label: '–ó–∞–∫—Ä—ã—Ç—å —à—Ç–æ—Ä—ã' },
        { id: 5, type: 'action', value: 'aroma', label: '–í–∫–ª—é—á–∏—Ç—å –∞—Ä–æ–º–∞–ª–∞–º–ø—É' }
      ],
      active: false,
      target: 'family'
    },
    {
      id: 6,
      title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–π',
      description: '–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      category: 'children',
      blocks: [
        { id: 1, type: 'condition', value: 'door_open', label: '–ï—Å–ª–∏ –¥–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞' },
        { id: 2, type: 'notification', value: 'parent', label: '–£–≤–µ–¥–æ–º–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π' },
        { id: 3, type: 'action', value: 'camera_record', label: '–ó–∞–ø–∏—Å—å –∫–∞–º–µ—Ä—ã' },
        { id: 4, type: 'delay', value: '5', label: '–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç' },
        { id: 5, type: 'notification', value: 'emergency', label: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' }
      ],
      active: true,
      target: 'children'
    }
  ]);

  const [selectedCategory, setSelectedCategory] = useState('all');
  const [editingScenario, setEditingScenario] = useState(null);
  const [newBlockType, setNewBlockType] = useState('action');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  const filteredScenarios = scenarios.filter(scenario => 
    selectedCategory === 'all' || scenario.category === selectedCategory
  );

  // –¢–∏–ø—ã –±–ª–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const blockTypes = [
    { id: 'time', name: '–í—Ä–µ–º—è', icon: '‚è∞', color: '#4dabf7' },
    { id: 'action', name: '–î–µ–π—Å—Ç–≤–∏–µ', icon: '‚ö°', color: '#51cf66' },
    { id: 'condition', name: '–£—Å–ª–æ–≤–∏–µ', icon: '‚ùì', color: '#ffd43b' },
    { id: 'delay', name: '–ó–∞–¥–µ—Ä–∂–∫–∞', icon: '‚è≥', color: '#9775fa' },
    { id: 'notification', name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', icon: 'üì±', color: '#ff6b6b' }
  ];

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
  const toggleScenario = (scenarioId) => {
    setScenarios(scenarios.map(scenario => 
      scenario.id === scenarioId 
        ? { ...scenario, active: !scenario.active }
        : scenario
    ));
  };

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
  const startEditing = (scenario) => {
    setEditingScenario({ ...scenario });
  };

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const cancelEditing = () => {
    setEditingScenario(null);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveScenario = () => {
    if (editingScenario) {
      setScenarios(scenarios.map(scenario => 
        scenario.id === editingScenario.id ? editingScenario : scenario
      ));
      setEditingScenario(null);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
  const addBlock = () => {
    if (!editingScenario) return;

    const newBlock = {
      id: Date.now(),
      type: newBlockType,
      value: '',
      label: '–ù–æ–≤—ã–π –±–ª–æ–∫'
    };

    setEditingScenario({
      ...editingScenario,
      blocks: [...editingScenario.blocks, newBlock]
    });
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
  const removeBlock = (blockId) => {
    if (!editingScenario) return;

    setEditingScenario({
      ...editingScenario,
      blocks: editingScenario.blocks.filter(block => block.id !== blockId)
    });
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
  const updateBlock = (blockId, field, value) => {
    if (!editingScenario) return;

    setEditingScenario({
      ...editingScenario,
      blocks: editingScenario.blocks.map(block =>
        block.id === blockId ? { ...block, [field]: value } : block
      )
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –±–ª–æ–∫–∞
  const getBlockInfo = (type) => {
    return blockTypes.find(bt => bt.id === type) || blockTypes[0];
  };

  return (
    <div className="app">
      <header className="app-header">
        <button className="back-button" onClick={onBack}>
          ‚Äπ
        </button>
        <div>
          <h1>–°—Ü–µ–Ω–∞—Ä–∏–∏</h1>
          <p className="address">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏</p>
        </div>
      </header>

      <main className="main-content">
        {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
        <section className="section">
          <div className="categories-filter">
            <div className="categories-scroll">
              {categories.map(category => (
                <button
                  key={category.id}
                  className={`category-btn ${selectedCategory === category.id ? 'active' : ''}`}
                  onClick={() => setSelectedCategory(category.id)}
                >
                  {category.name}
                </button>
              ))}
            </div>
          </div>
        </section>

        {/* –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ */}
        <section className="section">
          <div className="scenarios-grid">
            {filteredScenarios.map(scenario => (
              <div key={scenario.id} className="scenario-card">
                <div className="scenario-header">
                  <div className="scenario-title-section">
                    <h3 className="scenario-title">{scenario.title}</h3>
                    <span className="scenario-target">
                      {scenario.target === 'family' && 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è'}
                      {scenario.target === 'children' && 'üßí –î–µ—Ç–∏'}
                      {scenario.target === 'adults' && 'üë®‚Äçüíº –í–∑—Ä–æ—Å–ª—ã–µ'}
                    </span>
                  </div>
                  <div className="scenario-actions">
                    <button 
                      className={`toggle-btn ${scenario.active ? 'active' : ''}`}
                      onClick={() => toggleScenario(scenario.id)}
                    >
                      {scenario.active ? '–í–∫–ª' : '–í—ã–∫–ª'}
                    </button>
                    <button 
                      className="edit-btn"
                      onClick={() => startEditing(scenario)}
                    >
                      ‚úèÔ∏è
                    </button>
                  </div>
                </div>
                
                <p className="scenario-description">{scenario.description}</p>
                
                <div className="blocks-preview">
                  {scenario.blocks.slice(0, 4).map(block => {
                    const blockInfo = getBlockInfo(block.type);
                    return (
                      <div 
                        key={block.id} 
                        className="block-preview"
                        style={{ borderLeftColor: blockInfo.color }}
                      >
                        <span className="block-icon">{blockInfo.icon}</span>
                        <span className="block-label">{block.label}</span>
                      </div>
                    );
                  })}
                  {scenario.blocks.length > 4 && (
                    <div className="block-more">
                      +{scenario.blocks.length - 4} –µ—â—ë
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {editingScenario && (
          <div className="modal-overlay">
            <div className="modal-content">
              <div className="modal-header">
                <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è</h2>
                <button className="close-btn" onClick={cancelEditing}>√ó</button>
              </div>
              
              <div className="edit-section">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è</label>
                <input
                  type="text"
                  value={editingScenario.title}
                  onChange={(e) => setEditingScenario({
                    ...editingScenario,
                    title: e.target.value
                  })}
                  className="edit-input"
                />
              </div>

              <div className="edit-section">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={editingScenario.description}
                  onChange={(e) => setEditingScenario({
                    ...editingScenario,
                    description: e.target.value
                  })}
                  className="edit-textarea"
                  rows="3"
                />
              </div>

              <div className="blocks-editor">
                <h3>–ë–ª–æ–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è</h3>
                
                <div className="add-block-section">
                  <select 
                    value={newBlockType}
                    onChange={(e) => setNewBlockType(e.target.value)}
                    className="block-type-select"
                  >
                    {blockTypes.map(type => (
                      <option key={type.id} value={type.id}>
                        {type.icon} {type.name}
                      </option>
                    ))}
                  </select>
                  <button className="add-block-btn" onClick={addBlock}>
                    + –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫
                  </button>
                </div>

                <div className="blocks-list">
                  {editingScenario.blocks.map(block => {
                    const blockInfo = getBlockInfo(block.type);
                    return (
                      <div key={block.id} className="edit-block">
                        <div 
                          className="block-header"
                          style={{ backgroundColor: blockInfo.color }}
                        >
                          <span className="block-type-icon">{blockInfo.icon}</span>
                          <span className="block-type-name">{blockInfo.name}</span>
                          <button 
                            className="remove-block-btn"
                            onClick={() => removeBlock(block.id)}
                          >
                            √ó
                          </button>
                        </div>
                        <div className="block-content">
                          <input
                            type="text"
                            value={block.label}
                            onChange={(e) => updateBlock(block.id, 'label', e.target.value)}
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞"
                            className="block-input"
                          />
                          <input
                            type="text"
                            value={block.value}
                            onChange={(e) => updateBlock(block.id, 'value', e.target.value)}
                            placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ"
                            className="block-input"
                          />
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              <div className="modal-actions">
                <button className="btn-secondary" onClick={cancelEditing}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button className="btn-primary" onClick={saveScenario}>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default ScenariosPage;